package com.simshi.fp.chapter3

/**
  * Created by simshi on 10/26/16.
  */
object c3 {
  def main(args: Array[String]): Unit = {
    println("==== Chapter 3: List & Tree")
    println(s"example = ${List.example}")
    println(s"example2 = ${List.example2}")
    println(s"total = ${List.total}")
    println(s"e1 = ${List.e1}")

    val lst123 = List(1, 2, 3)
    println(s"tail(Nil) = ${List.tail(Nil)}")
    println(s"tail(List(1,2,3)) = ${List.tail(lst123)}")
    println(s"drop(Nil, 1) = ${List.drop(Nil, 1)}")
    println(s"drop(Nil, 3) = ${List.drop(Nil, 3)}")
    println(s"drop(List(1,2,3), 1) = ${List.drop(lst123, 1)}")
    println(s"drop(List(1,2,3), 2) = ${List.drop(lst123, 2)}")
    println(s"drop(List(1,2,3), 3) = ${List.drop(lst123, 3)}")
    println(s"dropWhile(List(1,2,3))(_ < 1) = ${List.dropWhile(lst123)(_ < 1)}")
    println(s"dropWhile(List(1,2,3))(_ < 2) = ${List.dropWhile(lst123)(_ < 2)}")
    println(s"dropWhile(List(1,2,3))(_ < 3) = ${List.dropWhile(lst123)(_ < 3)}")
    println(s"dropWhile(List(1,2,3))(_ == 2) = ${List.dropWhile(lst123)(_ == 2)}")
    println(s"setHead(List(1,2,3), 9) = ${List.setHead(lst123, 9)}")
    println(s"init(List(1,2,3)) = ${List.init(lst123)}")
    println(s"init(List(1)) = ${List.init(List(1))}")
    println(s"init(Nil) = ${List.init(Nil)}")
    println(s"foldRight(List(1,2,3), Nil:List[Int])(Cons(_,_)) = ${List.foldRight(List(1, 2, 3), Nil: List[Int])(Cons(_, _))}")
    println(s"length(Nil) = ${List.length(Nil)}")
    println(s"length(List(1)) = ${List.length(List(1))}")
    println(s"length(List(1,2,3)) = ${List.length(lst123)}")
    println("==== exercise 11 ====")
    println(s"sumL(List(1,2,3,4)) = ${List.sumL(List(1, 2, 3, 4))}")
    println(s"productL(List(1,2,3)) = ${List.productL(lst123)}")
    println(s"lengthL(List(1,2,3)) = ${List.lengthL(lst123)}")
    println(s"reverse(List(1,2,3)) = ${List.reverse(lst123)}")
    println(s"reverse(Nil) = ${List.reverse(Nil)}")
    println(s"concatR(List(1,2,3), List(4,5,6)) = ${List.concatR(lst123, List(4, 5, 6))}")
    println(s"flatten(List(List(1,2,3), List(4,5))) = ${List.flatten(List(lst123, List(4, 5)))}")
    println(s"flatten(List(List(1,2,3), List(4,5), List(6))) = ${List.flatten(List(lst123, List(4, 5), List(6)))}")
    println("==== exercise 16 ====")
    println(s"addOne(List(1,2,3)) = ${List.addOne(lst123)}")
    println(s"double2String(List(1.1,2.2,3.3)) = ${List.double2String(List(1.1, 2.2, 3.3))}")
    println(s"map(List(1,2,3))(_ + 1) = ${List.map(lst123)(_ + 1)}")
    println(s"map(List(1.1,2.2,3.3))(_.toString) = ${List.map(List(1.1, 2.2, 3.3))(_.toString)}")
    println(s"filter(List(1,2,3,4,5,6))(_ % 2 == 0) = ${List.filter(List(1, 2, 3, 4, 5, 6))(_ % 2 == 0)}")
    println(s"filter(List(1,2,3))(_ > 0) = ${List.filter(lst123)(_ > 0)}")
    println(s"filter(List(1,2,3))(_ > 1) = ${List.filter(lst123)(_ > 1)}")
    println(s"filter(List(1,2,3))(_ > 3) = ${List.filter(lst123)(_ > 3)}")
    println(s"flatMap(List(1,2,3))(i => List(i,i)) = ${List.flatMap(List(1, 2, 3))(i => List(i, i))}")
    println(s"filterViaFlatMap(List(1,2,3))(_ > 0) = ${List.filterViaFlatMap(lst123)(_ > 0)}")
    println(s"filterViaFlatMap(List(1,2,3))(_ > 1) = ${List.filterViaFlatMap(lst123)(_ > 1)}")
    println("==== exercise 22 ====")
    println(s"listAddInt(List(1,2,3), List(4,5,6)) = ${List.listAddInt(lst123, List(4, 5, 6))}")
    println(s"zipWith(List(1,2,3), List(4,5,6))(_ * _) = ${List.zipWith(lst123, List(4, 5, 6))(_ * _)}")
    println(s"hasSubsequence(List(1,2,3,4), List(1,2,3)) = ${List.hasSubsequence(List(1, 2, 3, 4), List(1, 2, 3))}")
    println(s"hasSubsequence(List(1,2,3,4), List(4)) = ${List.hasSubsequence(List(1, 2, 3, 4), List(4))}")
    println(s"hasSubsequence(List(1,2,3,4), List(2,3)) = ${List.hasSubsequence(List(1, 2, 3, 4), List(2, 3))}")
    println(s"hasSubsequence(List(1,2,3,4), List(5)) = ${List.hasSubsequence(List(1, 2, 3, 4), List(5))}")
    println(s"hasSubsequence(List(1,2,3,4), List(3,4,5)) = ${List.hasSubsequence(List(1, 2, 3, 4), List(3, 4, 5))}")
    println(s"hasSubsequence(List(1,2,3,4), List(3,3)) = ${List.hasSubsequence(List(1, 2, 3, 4), List(3, 3))}")
    println(s"hasSubsequence(List(1,2,3,4), Nil) = ${List.hasSubsequence(List(1, 2, 3, 4), Nil)}")

    println("==== Tree ====")
    val leaf0 = Leaf(0)
    val leaf1 = Leaf(1)
    val leaf2 = Leaf(2)
    val branch12 = Branch(leaf1, leaf2)
    val tree_l0_b12 = Branch(leaf0, branch12)

    println(s"size(leaf0) = ${Tree.size(leaf0)}")
    println(s"size(branch12) = ${Tree.size(branch12)}")
    println(s"size(tree_l0_b12) = ${Tree.size(tree_l0_b12)}")
    println(s"maximumInt(leaf0) = ${Tree.maximumInt(leaf0)}")
    println(s"maximumInt(branch12) = ${Tree.maximumInt(branch12)}")
    println(s"maximumInt(tree_l0_b12) = ${Tree.maximumInt(tree_l0_b12)}")
    println(s"depth(leaf0) = ${Tree.depth(leaf0)}")
    println(s"depth(branch12) = ${Tree.depth(branch12)}")
    println(s"depth(tree_l0_b12) = ${Tree.depth(tree_l0_b12)}")
    println(s"map(leaf0)(_ + 1) = ${Tree.map(leaf0)(_ + 1)}")
    println(s"map(branch12)(_ * 2) = ${Tree.map(branch12)(_ * 2)}")
    println(s"map(tree_l0_b12)(_.toString) = ${Tree.map(tree_l0_b12)(_.toString)}")
    println(s"sizeF(leaf0) = ${Tree.sizeF(leaf0)}")
    println(s"sizeF(branch12) = ${Tree.sizeF(branch12)}")
    println(s"sizeF(tree_l0_b12) = ${Tree.sizeF(tree_l0_b12)}")
    println(s"depthF(leaf0) = ${Tree.depthF(leaf0)}")
    println(s"depthF(branch12) = ${Tree.depthF(branch12)}")
    println(s"depthF(tree_l0_b12) = ${Tree.depthF(tree_l0_b12)}")
    println(s"mapF(leaf0)(_ + 1) = ${Tree.mapF(leaf0)(_ + 1)}")
    println(s"mapF(branch12)(_ * 2) = ${Tree.mapF(branch12)(_ * 2)}")
    println(s"mapF(tree_l0_b12)(_.toString) = ${Tree.mapF(tree_l0_b12)(_.toString)}")
  }
}
